package mongodb

import (
	"context"
	"reflect"

	"github.com/lonelypale/goutils/types"
	"github.com/lonelypale/goutils/validator"
)

/*
type Service interface {
	Start() (bool, error)
	OnStart() error

	Stop() bool
	OnStop()

	Reset() (bool, error)
	OnReset() error

	IsRunning() bool

	String() string

	SetLogger(log.Logger)
}
*/
// todo: doc可优化为接口类型,如上例
type Model struct {
	doc  interface{}
	coll *Collection
}

func NewModel(doc interface{}, coll *Collection) Model {
	return Model{doc, coll}
}

func (m Model) Collection() *Collection {
	return m.coll
}

func (m Model) IsNil() bool {
	return m.doc == nil || m.coll == nil
}

func (m Model) Validate(tags ...string) error {
	return validator.Validate(m.doc, tags...)
}

// Create
func (m Model) Create(ctxs ...context.Context) error {
	var ctx context.Context
	if len(ctxs) > 0 {
		ctx = ctxs[0]
	} else {
		var cancel context.CancelFunc
		ctx, cancel = m.coll.GetContext()
		defer cancel()
	}

	_, err := m.coll.InsertOne(ctx, m.doc)
	if err != nil {
		return err
	}

	return nil
}

// Update
func (m Model) Update(ctxs ...context.Context) error {
	var ctx context.Context
	if len(ctxs) > 0 {
		ctx = ctxs[0]
	} else {
		var cancel context.CancelFunc
		ctx, cancel = m.coll.GetContext()
		defer cancel()
	}

	if err := m.Validate(UpdateTagName); err != nil {
		return err
	}

	vDoc := reflect.ValueOf(m.doc)
	if vDoc.Kind() == reflect.Ptr {
		vDoc = vDoc.Elem()
	}
	vid := vDoc.FieldByName(IDField)
	if vid.Kind() == reflect.Invalid {
		return ErrNilObjectID
	}

	id := vid.Interface()
	if id.(types.ObjectID).IsZero() {
		return ErrNilObjectID
	}

	filter := ID(id)
	updater := Set(m.doc)
	if _, err := m.coll.UpdateOne(ctx, filter, updater); err != nil {
		return err
	}

	return nil
}

// Delete
func (m Model) Delete(ctxs ...context.Context) error {
	var ctx context.Context
	if len(ctxs) > 0 {
		ctx = ctxs[0]
	} else {
		var cancel context.CancelFunc
		ctx, cancel = m.coll.GetContext()
		defer cancel()
	}

	if err := m.Validate(DeleteTagName); err != nil {
		return err
	}

	vDoc := reflect.ValueOf(m.doc)
	if vDoc.Kind() == reflect.Ptr {
		vDoc = vDoc.Elem()
	}
	vid := vDoc.FieldByName(IDField)
	if vid.Kind() == reflect.Invalid {
		return ErrNilObjectID
	}

	filter := ID(vid.Interface())
	if _, err := m.coll.DeleteOne(ctx, filter); err != nil {
		return err
	}

	return nil
}

// Find
func (m Model) Find(ctxs ...context.Context) error {
	var ctx context.Context
	if len(ctxs) > 0 {
		ctx = ctxs[0]
	} else {
		var cancel context.CancelFunc
		ctx, cancel = m.coll.GetContext()
		defer cancel()
	}

	vDoc := reflect.ValueOf(m.doc)
	if vDoc.Kind() == reflect.Ptr {
		vDoc = vDoc.Elem()
	}
	vid := vDoc.FieldByName(IDField)
	if vid.Kind() == reflect.Invalid {
		return ErrNilObjectID
	}

	filter := ID(vid.Interface())
	if err := m.coll.FindOne(ctx, m.doc, filter); err != nil {
		return err
	}

	return nil
}

func (m Model) Save(ctxs ...context.Context) error {
	var ctx context.Context
	if len(ctxs) > 0 {
		ctx = ctxs[0]
	} else {
		var cancel context.CancelFunc
		ctx, cancel = m.coll.GetContext()
		defer cancel()
	}

	if _, err := m.coll.Save(ctx, m.doc); err != nil {
		return err
	}

	return nil
}

func (m Model) FindOrInsert(filter interface{}, ctxs ...context.Context) error {
	var ctx context.Context
	if len(ctxs) > 0 {
		ctx = ctxs[0]
	} else {
		var cancel context.CancelFunc
		ctx, cancel = m.coll.GetContext()
		defer cancel()
	}

	if _, err := m.coll.FindOrInsert(ctx, filter, m.doc); err != nil {
		return err
	}

	return nil
}
